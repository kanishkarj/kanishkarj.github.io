{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/javascript-oops","result":{"data":{"post":{"__typename":"MdxPost","slug":"/javascript-oops","title":"Object Oriented Javascript","date":"08.07.2018","tags":[{"name":"Javascript","slug":"javascript"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Object Oriented Javascript\",\n  \"tags\": [\"Javascript\"],\n  \"date\": \"2018-07-08T00:00:00.000Z\",\n  \"slug\": \"/javascript-oops\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Object Oriented programming in Javascript is a bit weird, classes are not defined in javascript unlike languages like C++, java or python. That\\u2019s, as of ECMAScript5, the Class keyword has been introduced in the ECMAScript6 definition. But it\\u2019s just a syntactical sugar over the original object definition in Javascript. Hence it is important that every Javascript developer knows how objects work.\"), mdx(\"p\", null, \"In JavaScript, an object is an unordered collection of properties. Each property consists of a key/value pair, and can reference either a primitive (e.g., strings, numbers, booleans, etc.) or another object. Unlike elements in an array, which are accessed by a numeric index, properties in objects are accessed by their key name using either square bracket notation or dot notation.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var Book = {\\n    name: \\\"Harry Potter and the Philosopher's Stone\\\",\\n    author: \\\"J. K. Rowling\\\",\\n    year: 1997\\n}\\n\\nvar temp = \\\"author\\\"\\n\\nconsole.log(Book.author); // Prints \\\"J. K. Rowling\\\" to the console\\nconsole.log(Book['year']); // Prints \\\"1997\\\" to the console\\nconsole.log(Book[temp]); // Prints \\\"J. K. Rowling\\\" to the console\\nconsole.log(Book.temp); // Prints \\\"undefined\\\" to the console\\n\")), mdx(\"p\", null, \"The above code was a representation of an object in Javascript, and different ways to get the attributes from the object.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no 1 to 5 the object is defined If you notice the object definition is similar to dictionaries in python. They are basically key-value pairs.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line 9 logs the author of the book object via dot notation.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line 10 logs the year of the book object via square bracket notation.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line 11 is similar to line 10, except that instead of having the string inside the square brackets we have a variable that stores the string.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line 12 is similar to line 9, except that instead of having the actual attribute we have a variable called temp which has the attribute name as a string assigned to it. And as you can see, it doesn\\u2019t work.\"))), mdx(\"p\", null, \"So what if you wanted to remove an attribute from an object. it\\u2019s simple as this :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var dog = {\\n    name: \\\"Harry\\\",\\n    age: 7\\n};\\n\\nconsole.log(dog); // logs \\\"{ name: 'Harry', age: 7 }\\\" to the console\\ndelete dog.age;\\nconsole.log(dog); // logs \\\"{ name: 'Harry'}\\\" to the console\\n\")), mdx(\"h3\", null, \"Defining methods inside objects\"), mdx(\"p\", null, \"Methods are nothing but functions defined inside objects. Take a look at the code snippet below :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var Human = {\\n    name: \\\"Harry\\\",\\n    age: 7,\\n    gender: 'MALE',\\n    hello: function (){\\n        console.log(\\\"Hello!\\\");\\n    }\\n};\\n\\nHuman.hello(); // prints \\\"Hello!\\\" onto the console.\\nHuman['hello'](); // prints \\\"Hello!\\\" onto the console.\\n\")), mdx(\"p\", null, \"In here, we have defined an object called Human, with a method hello; that just logs \\u201CHello!\\u201D onto the console.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Line no. 10 and 11 show how you can call these methods in your program. Note that they can be called via both the dot notation and the square brackets notation.\")), mdx(\"p\", null, \"But what if we want to access the properties of the object in these methods? Look at the code snippet below :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var Human = {\\n    name: \\\"Harry\\\",\\n    age: 7,\\n    gender: 'MALE',\\n    hello: function (){\\n        console.log(`Hello! I am ${this.name}.`);\\n    }\\n};\\n\\nHuman.hello(); // prints \\\"Hello! I am Harry.\\\" onto the console.\\n\")), mdx(\"p\", null, \"The this keyword comes to our rescue. this keyword points to the object from which the method is called, hence giving access to all the properties defined in the object.\"), mdx(\"h3\", null, \"Immutability\"), mdx(\"p\", null, \"In Javascript objects are mutable by default and primary data-types are immutable. i.e. if passed to a function the actual variable is passed in case of primary data-types while a reference is passed in case of object. Look at the code snippet below :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var v = 10;\\nvar obj = {\\n  data : 100\\n}\\n\\nfunction fn (p1,p2) {\\n  p1 = p1 - 1;\\n  p2.data =  90;\\n}\\n\\nfn(v,obj);\\n\\nconsole.log(v); // 10\\nconsole.log(obj); // { data: 90 }\\n\")), mdx(\"p\", null, \"If you notice the variable \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v \"), \"is not affected by the function, while obj.data is changed after the function call. This is because primary data-types (like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"v\"), \") are passed by value while objects (like \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"obj\"), \") are passed by reference.\"), mdx(\"h3\", null, \"Constructor\"), mdx(\"p\", null, \"If you have worked with OOP languages like C++, you would know that classes have constructors. They are functions that initialize and return objects. Let\\u2019s look at a constructor in Javascript :\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function book(name, author, year) {\\n    this.name = name;\\n    this.author = author;\\n    this.year = year;\\n    this.intro = function (){\\n        console.log(`${this.name}, written by ${this.author} on ${this.year}`);\\n    }\\n}\\n\\nvar b1 = new book(\\\"Harry Potter and the Philosopher's Stone\\\",\\\"J. K. Rowling\\\",1997);\\nvar b2 = new book(\\\"Book2\\\",\\\"Author\\\",1998);\\n\\nconsole.log(b1);\\nconsole.log(b2);\\n\\nb1.intro();\\n\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://cdn-images-1.medium.com/max/3824/1*fiLrNZO88tQtD6vG1Q70XQ.png\",\n    \"alt\": \"The output\"\n  })), mdx(\"em\", {\n    parentName: \"p\"\n  }, \"The output\")), mdx(\"p\", null, \"Did you see what we did there? we created a new object using a constructor. The function when passed arguments, returns a new object after assigning some attributes. New objects can be instantiated like how its done in line 10 and 11. Also, note we have used the new operator with the constructor. It\\u2019s important to use the new keyword before constructors if we accidentally forget \\u201Cnew\\u201D we will be modifying the global object instead of the newly created object. Take a look at the output, you can see that new objects are created, Hurray!\"), mdx(\"h3\", null, \"Object.defineProperty()\"), mdx(\"p\", null, \"The Object.defineProperty() function can be used to define a new / edit an existing property on any object. Click here to read more about it.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"function person(name) { \\n    Object.defineProperty(this, \\\"name\\\", { \\n        get: function() { \\n          return \\\"Hi! I am \\\" + name;       \\n        },        \\n        set: function(newName) {            \\n          name = newName;        \\n        },               \\n        configurable: false     \\n     }); \\n  }\\n\\nvar p1 = new person(\\\"Henry\\\");\\nconsole.log(p1.name);    // Prints \\\"Hi! I am Henry\\\" to the console.\\n\\ndelete p1.name;    \\nconsole.log(p1.name);    // Prints \\\"Hi! I am Henry\\\" to the console.\\n\\np1.name = \\\"Harry\\\";\\nconsole.log(p1.name); // Prints \\\"Hi! I am Henry\\\" to the console.\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Line no. 2\\u201310 we have called the Object.defineProperty() method, with the params :\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"this : indicating we want the property set for the object referenced via the this keyword.\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"name : The attribute which we would like to define.\\nThen we have a configuration JSON object.\"))), mdx(\"ol\", {\n    \"start\": 2\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no. 3\\u20135 we have defined a getter function.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no. 6\\u20138 we have defined a setter function.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no. 9 we have an attribute called configurable set to false, which doesn\\u2019t allow deletion of the \\u201Cname\\u201D property.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no. 16 we have written code to delete the property, but as you can see it doesn\\u2019t work.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Line no. 19 we have modified the name property of the object, which is works!\"))), mdx(\"p\", null, \"Okay! so that\\u2019s all about OOP, concepts of \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@kanishkarj/javascript-prototypal-inheritance-b6e743cc4dbe\"\n  }), \"inheritance\"), \" and \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://medium.com/@kanishkarj/higher-order-functions-and-closures-6a9dccb2e052\"\n  }), \"data-hiding via closures\"), \" has been explained in different posts. check it out!\"));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"Object Oriented programming in Javascript is a bit weird, classes are not defined in javascript unlike languages like C++, java or python…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/javascript-oops","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["1581887981","3787687951","3787687951"]}